"""
Autogenerated ODE definition SBML file with sbmlutils (https://github.com/matthiaskoenig/sbmlutils.git).

    model: {{ model.getId() }}

time: [{{units["time"]}}]
substance: [{{units["substance"]}}]
extent: [{{units["extent"]}}]
volume: [{{units["volume"]}}]
area: [{{units["area"]}}]
length: [{{units["length"]}}]
"""
import numpy as np
import pandas as pd

def piecewise(*kwargs):
    """Piecewise function.
    piecewise      | x1, y1, [x2, y2,] [...] [z] | A piecewise function: if (y1), x1.  Otherwise, if (y2), x2, etc.  Otherwise, z.
    """
    for k in np.floor(len(kwargs)/2.0):
        if kwargs[k+1]:
            return kwargs[k]
    if len(kwargs) % 2 == 1:
        return kwargs[-1]


# -------------------
# ids
# -------------------
xids = [{% for id in xids %}"{{ id }}", {% endfor %}]
pids = [{% for id in pids %}"{{ id }}", {% endfor %}]
yids = [{% for id in yids %}"{{ id }}", {% endfor %}]

# -------------------
# initial conditions
# -------------------
x0 = np.array([
{% for id in xids %}
    {{x0[id]}},     # [{{ loop.index0 }}] {{ id }} [{{x_units[id]}}] {{names[id]}}{% if x_compartments[id] %} in {{x_compartments[id]}}{% endif %}

{% endfor %}
])

# -------------------
# parameters
# -------------------
p = np.array([
{% for id in pids %}
    {{ 'np.NaN' if p.get(id)|string == 'nan' else p[id] }},     # [{{ loop.index0 }}] {{ id }} [{{p_units[id]}}] {{names[id]}}
{% endfor %}
])


def f_dxdt(x: np.ndarray, t: float, p: np.ndarray) -> np.ndarray:
    """ODE system."""
    {% for id in yids %}
    {{id}} = {{y[id]}}      # [{{ loop.index0 }}] {{ id }} [{{y_units[id]}}] {{names[id]}}
    {% endfor %}

    # ode
    return np.ndarray([
        {% for id in xids %}
        {{dx[id]}},       # [{{ loop.index0 }}] {{ id }} [{{x_units[id]}}] {{names[id]}}
        {% endfor %}
    ])


def f_y(x: np.ndarray, t: float, p: np.ndarray) -> np.ndarray:
    """Calculate y.
    :param x: state vector
    :param t: time
    :param p: parameter vector
    :return:
    """

    {% for id in yids %}
    {{id}} = {{y[id]}}  # [{{ loop.index0 }}] {{ id }}  [{{y_units[id]}}] {{names[id]}}
    {% endfor %}

    # --------------------------------------

    y = np.empty(shape=({{yids | length}}))
    {% for id in yids %}
    y[{{loop.index0}}] = {{id}}  # [{{ loop.index0 }}] {{ id }}  [{{y_units[id]}}] {{names[id]}}
    {% endfor %}

    return y


def f_z(X, T, p):
    """ DataFrame of full timecourse of solution. """
    (Nt, Nx) = X.shape
    Ny = len(yids)
    Nz = 1 + Nx + Ny
    columns = ["time"] + xids + yids
    Z = np.empty(shape=(Nt, Nz))
    Z[:, 0] = T
    Z[:, 1:(Nx+1)] = X
    for kt in range(Nt):
        y = f_y(x=X[kt, :], t=T[kt], p=p)
        Z[kt, (Nx+1):] = y

    Z = pd.DataFrame(Z, columns=columns)
    return Z
